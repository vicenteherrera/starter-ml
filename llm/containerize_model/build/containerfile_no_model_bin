
# BUILDER STAGE ---------------------------------------------------------------------------

# python:3.11.7-bookworm 
FROM python@sha256:1620f0640a0e4a791022396a06173be18a9476d4d705e9962240bfcdd72147d8 as builder
# https://hub.docker.com/layers/library/python/3.11.7-bookworm/images/sha256-a526139339e938726256809dad42ba8dd4edf3133194dbe6f62d400aff6bb886?context=explore

# We check early that the user ID is a low number
ARG USER_ID
RUN if test ${USER_ID:-10000} -lt 1000 ; then echo "Error: USER_ID argument must be greater than 1000" && exit 1 ; fi
# We accept an input userid to make it easier to run mounting local files from a developers computer
# It will be used in the next stage, but we want to check and fail early

# We create Python library files as root in builder, that way app will not be able to modify them later
WORKDIR /build

ARG YOUR_ENV
ENV YOUR_ENV=${YOUR_ENV} \
  PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  PIP_NO_CACHE_DIR=off \
  PIP_DISABLE_PIP_VERSION_CHECK=on \
  PIP_DEFAULT_TIMEOUT=100

# Install a specific Poetry version including hash verification for all dependencies
COPY base_requirements/poetry.out ./poetry.out
RUN pip install --require-hashes -r ./poetry.out
# https://pypi.org/project/poetry/#copy-hash-modal-93691622-555e-44e4-903c-9573b4c9da7d
# https://pip.pypa.io/en/stable/topics/secure-installs/
# https://lil.law.harvard.edu/blog/2019/05/20/improving-pip-compile-generate-hashes/

# Copy Python build requirements
COPY poetry.lock pyproject.toml ./

# Install libraries without a virtual environment (not needed)
RUN poetry config virtualenvs.create false  && \
  poetry install $(test "$YOUR_ENV" == production && echo "--no-dev") --no-interaction --no-ansi

# Copy sources
COPY ./src ./src

# Compile source into binary with pyinstaller
COPY base_requirements/pyinstaller.out ./pyinstaller.out
RUN pip install --require-hashes -r ./pyinstaller.out
RUN mkdir -p ./bin && cd ./bin  && \
  pyinstaller --onefile ../src/app.py

# # Compile source into binary with nuitka
# COPY base_requirements/nuitka.out ./nuitka.out
# # TODO: find a base image with patchelf, or check it's hash before installing
# RUN apt update && apt install patchelf=0.14.3-1+b1
# RUN pip install --require-hashes -r ./nuitka.out
# RUN mkdir -p ./bin && cd ./bin  && \
#   python -m nuitka --onefile ../src/app.py

# APP STAGE ---------------------------------------------------------------------------
# # debian:bookworm-slim
FROM debian@sha256:804194b909ef23fb995d9412c9378fb3505fe2427b70f3cc425339e48a828fca as app
# https://hub.docker.com/layers/library/debian/bookworm-slim/images/sha256-911821c26cc366231183098f489068afff2d55cf56911cb5b7bd32796538dfe1?context=explore

# Although the python code is compiled into a binary, it has requirements to run
# that aren't satisfied by distroless or from scratch base images:
# FROM gcr.io/distroless/static-debian12 as app
# FROM scratch as app

# Make it easy build and mount model on dev machine using same uid for files
ARG USER_ID
USER ${USER_ID:-10000}

WORKDIR /app

# Copy binary file
COPY --from=builder --chown=${USER_ID:-10000} /build/bin/dist/app /app/bin/app
# COPY --from=builder --chown=${USER_ID:-10000} /build/bin/app.bin /app/bin/app

# Set Huggingface to operate offline
ENV HF_HUB_OFFLINE=1
ENV HF_HUB_DISABLE_TELEMETRY=1

# Set local folder for Huggingface models
ENV HF_HOME="/app/.cache/huggingface/"

# Your own customization beyond this point -----------

# If exposing a port, declare it explicitely
# EXPOSE 3000

# Example code uses env to know which model is running
ARG MODEL
ARG REVISION
ENV MODEL="${MODEL}"
ENV REVISION="${REVISION}"

# ENTRYPOINT ["/bin/bash"]

ENTRYPOINT ["/app/bin/app"]